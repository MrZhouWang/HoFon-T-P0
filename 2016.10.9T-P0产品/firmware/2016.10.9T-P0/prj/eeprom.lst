C51 COMPILER V9.52.0.0   EEPROM                                                            11/16/2016 13:22:40 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\out\eeprom.obj
COMPILER INVOKED BY: C:\Program Files\kile\C51\BIN\C51.EXE ..\src\eeprom.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\inc;..\prj
                    -;..\src) DEBUG OBJECTEXTEND PRINT(.\eeprom.lst) TABS(2) OBJECT(..\out\eeprom.obj)

line level    source

   1          //#include "main.h"
   2          //#include "eeprom.h"
   3          //#include "uart.h"
   4          //#include "led.h"
   5          
   6          #define AP_EPROM_GLOBALS  
   7          #include "extern_symbol.h" 
   8          
   9          typedef union union_temp16
  10          {
  11              UINT16 un_temp16;
  12              UINT8  un_temp8[2];
  13          }UNION_16;
  14          
  15          
  16          UINT8 Byte_Read(UINT8 * add);              //读一字节，调用前需打开IAP 功能
  17          void Byte_Program(UINT8 * add, UINT8 ch);  //字节编程，调用前需打开IAP 功能
  18          void Sector_Erase(UINT16 add);            //擦除扇区
  19          void IAP_Disable();                       //关闭IAP 功能
  20          
  21          
  22          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  23          UINT8 Byte_Read(UINT8 * add)
  24          {
  25   1          UNION_16 my_unTemp16;
  26   1          
  27   1          IAP_DATA = 0x00;
  28   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  29   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  30   1      
  31   1          my_unTemp16.un_temp16 = (UINT16)add;
  32   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  33   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  34   1      
  35   1          //EA = 0;
  36   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  37   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  38   1          _nop_();
  39   1          //EA = 1;
  40   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  41   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  42   1          return (IAP_DATA);
  43   1      }
  44          
  45          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  46          void Byte_Program(UINT8 * add, UINT8 ch)
  47          {
  48   1          UNION_16 my_unTemp16;
  49   1          
  50   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  51   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  52   1      
  53   1          my_unTemp16.un_temp16 = (UINT16)add;
  54   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
C51 COMPILER V9.52.0.0   EEPROM                                                            11/16/2016 13:22:40 PAGE 2   

  55   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  56   1      
  57   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
  58   1          //EA = 0;
  59   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  60   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  61   1          _nop_();
  62   1          //EA = 1;
  63   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  64   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  65   1      }
  66          
  67          //擦除扇区, 入口:DPTR = 扇区地址
  68          void Sector_Erase(UINT16 add)
  69          {
  70   1          UNION_16 my_unTemp16;
  71   1          
  72   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  73   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  74   1      
  75   1          my_unTemp16.un_temp16 = add;
  76   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  77   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  78   1      
  79   1          //EA = 0;
  80   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  81   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  82   1          _nop_();
  83   1          //EA = 1;
  84   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  85   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  86   1      }
  87          
  88          void IAP_Disable()
  89          {
  90   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  91   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  92   1          IAP_CONTR = 0;      //关闭IAP 功能
  93   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  94   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  95   1          IAP_ADDRH = 0;
  96   1          IAP_ADDRL = 0;
  97   1      }
  98           
  99          
 100          /*************************************************************************
 101                                Read len bytes from eeprom
 102          **************************************************************************/
 103          
 104          void eeprom_read_block(UINT8 * Buff, UINT8 * beginAddr, UINT8 len)
 105          {
 106   1          UINT8 i;
 107   1      
 108   1          for (i = 0; i < len; i++)
 109   1          {
 110   2              Buff[i] = Byte_Read(beginAddr);
 111   2              beginAddr++;
 112   2          }
 113   1          
 114   1          return;
 115   1      }
 116          
C51 COMPILER V9.52.0.0   EEPROM                                                            11/16/2016 13:22:40 PAGE 3   

 117          /*************************************************************************
 118                                write len bytes to eeprom
 119          **************************************************************************/
 120          void eeprom_write_block(UINT8 * Buff, UINT8 * beginAddr, UINT8 len)
 121          {
 122   1          UINT8 i;
 123   1      
 124   1          for (i = 0; i < len; i++)
 125   1          {
 126   2              Byte_Program(beginAddr, Buff[i]);
 127   2              beginAddr++;
 128   2          }
 129   1      
 130   1          return;
 131   1      }
 132          
 133          /*************************************************************************
 134                                erase a sector
 135          **************************************************************************/
 136          
 137          //data flash: all 4K 
 138          //512Byte/sector, 8 sectors
 139          //Writing data flash must erase the sector, and then write every byte;
 140          //Each sector address as follows:
 141          UINT16 CODE SECTOR_PAGE[] = {
 142              0x0000, 0x0200, 0x0400, 0x0600, 
 143              0x0800, 0x0A00, 0x0C00, 0x0E00
 144          };
 145          
 146          void eeprom_erase_sector(UINT16 pageAddr)
 147          {
 148   1          Sector_Erase(pageAddr);
 149   1          return;
 150   1      }
 151          
 152          /*************************************
 153            Read Parameter from inn EEPROM
 154            with verify
 155          *************************************/
 156          //#define PARA_LEN    5
 157          #define PARA_LEN MAX_CFGPARA
 158          UINT8 ReadParaInEeprom(UINT8 offset)
 159          {
 160   1        UINT8 i = offset;
 161   1        UINT8 para_page_0[PARA_LEN];
 162   1        UINT8 para_page_1[PARA_LEN];
 163   1        UINT8 para_page_2[PARA_LEN];
 164   1      
 165   1        if (offset >= PARA_LEN) return 0xff;
 166   1        
 167   1          eeprom_read_block(para_page_0, (UINT8 *)SECTOR_PAGE[0], PARA_LEN);
 168   1          eeprom_read_block(para_page_1, (UINT8 *)SECTOR_PAGE[1], PARA_LEN);
 169   1          eeprom_read_block(para_page_2, (UINT8 *)SECTOR_PAGE[2], PARA_LEN);
 170   1         
 171   1        if (para_page_0[i] == para_page_1[i])
 172   1        {
 173   2          if (para_page_1[i] != para_page_2[i])           //sector 2 error
 174   2          {
 175   3              para_page_2[i] = para_page_0[i];            //Modify error byte
 176   3                  eeprom_erase_sector(SECTOR_PAGE[2]);        //Erase sector 2
 177   3                                                              //Write sector 2
 178   3              eeprom_write_block(para_page_2, (UINT8 *)SECTOR_PAGE[2] , PARA_LEN);
C51 COMPILER V9.52.0.0   EEPROM                                                            11/16/2016 13:22:40 PAGE 4   

 179   3          }
 180   2          return para_page_0[i];  
 181   2        }
 182   1        else if (para_page_0[i] == para_page_2[i])          //sector 1 error
 183   1        {
 184   2              para_page_1[i] = para_page_0[i];                //Modify error byte
 185   2            eeprom_erase_sector(SECTOR_PAGE[1]);            //Erase sector 1
 186   2                                                            //Write sector 1
 187   2            eeprom_write_block(para_page_1, (UINT8 *)SECTOR_PAGE[1] , PARA_LEN);
 188   2            return para_page_0[i];  
 189   2        }
 190   1        else                                                //Sector 0 error
 191   1        {
 192   2            para_page_0[i] = para_page_1[i];                //Modify error byte
 193   2            eeprom_erase_sector(SECTOR_PAGE[0]);            //Erase sector 0
 194   2            eeprom_write_block(para_page_0, (UINT8 *)SECTOR_PAGE[0] , PARA_LEN);
 195   2            return para_page_1[i];        
 196   2        }
 197   1      }
 198          
 199          /*******************************************************************************
 200                   检查参数是否超出范围，超出则恢复默认值,并存入备份区
 201            input:   none
 202            output:  none         
 203          *******************************************************************************/
 204          //                        1            2            3            4       5         6
 205          INT8U CODE  Para_MaxTB[MAX_CFGPARA] = { MAX_ADDR,MAX_FINISHEDLED,MAX_WTTIME,MAX_FNDEFINE,MAX_DISPMODE,MAX_K
             -EYPROCLED };
 206          INT8U CODE  Para_DefTB[MAX_CFGPARA] = { DEF_ADDR,DEF_FINISHEDLED,DEF_WTTIME,DEF_FNDEFINE,DEF_DISPMODE,DEF_K
             -EYPROCLED };
 207          
 208          void  ChkParaOverToDefVal(void)
 209          {
 210   1        UINT8 i;
 211   1      
 212   1        // 判断参数，如果超出范围则回复默认值
 213   1      
 214   1        for (i = 0; i < MAX_CFGPARA; i++)
 215   1        { 
 216   2            // 判断是否超出范围
 217   2          if(para.Byte[i] > Para_MaxTB[i])
 218   2            { para.Byte[i] = Para_DefTB[i]; }
 219   2      
 220   2          para_bk.Byte[i] = para.Byte[i];          // 保存入备份区
 221   2        }
 222   1      
 223   1      }
 224          /*******************************************************************************
 225                        save Parameter to EEPROM
 226            input:   none
 227            output:  none         
 228          *******************************************************************************/
 229          void SaveParaToBlock(void)
 230          {
 231   1        INT8U i;
 232   1        // 检查参数是否溢出，是则恢复，并备份入备份区中
 233   1        ChkParaOverToDefVal();
 234   1        
 235   1        // 写入 eeprom  ，写3个区域
 236   1        for (i = 0; i < 3; i++)
 237   1        {
 238   2            eeprom_erase_sector(SECTOR_PAGE[i]);   
C51 COMPILER V9.52.0.0   EEPROM                                                            11/16/2016 13:22:40 PAGE 5   

 239   2          eeprom_write_block (&para.Byte[0], (UINT8 *)SECTOR_PAGE[i], MAX_CFGPARA);
 240   2        }
 241   1      
 242   1        sys_disp_set();   // 根据设定值改变库位位数和数量位数
 243   1      }
 244          /*******************************************************************************
 245                        Load Parameter from EEPROM
 246            input:   none      
 247            output:  none         
 248          *******************************************************************************/
 249          void LoadParaInEeprom(void)
 250          {
 251   1        // 读出参数
 252   1        INT8U i;
 253   1        for(i = 0;i < MAX_CFGPARA;i++)
 254   1        { para.Byte[i] = ReadParaInEeprom(EE_ADDRESS+i); }
 255   1      
 256   1      
 257   1        // 检查参数是否溢出，是则恢复，并备份入备份区中
 258   1        if( (para.str.address == 0) )//||(addr == 0) )  
 259   1          { para.str.address = DEF_ADDR;  }     //默认加载参数
 260   1      
 261   1        ChkParaOverToDefVal();
 262   1      }
 263          
 264          /*******************************************************************************
 265                          END         
 266          *******************************************************************************/
 267          
 268          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    682    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      43
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
